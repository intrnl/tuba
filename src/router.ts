
// This file is automatically generated, do not edit.

import { mergeProps, splitProps } from "solid-js";

import {
	A as A_,
	type AnchorProps,
	Navigate as Navigate_,
	type NavigateOptions,
	type NavigateProps,
	useNavigate as useNavigate_,
	useParams as useParams_,
} from "@solidjs/router";

export type PathsWithParams = 
	| "/channel/:channel"
	| "/channel/:channel/playlists"
	| "/channel/:channel/channels"
	| "/channel/:channel/streams"
	| "/channel/:channel/shorts"
	| "/watch/:video"
	| "/watch/:video/about";
export type PathsWithoutParams = 
	| "/subscriptions"
	| "/you"
	| "/history"
	| "/library"
	| "/"
	| "/search";
export type Paths = PathsWithParams | PathsWithoutParams;

export interface Params {
	"/channel/:channel": { "channel": string };
	"/channel/:channel/playlists": { "channel": string };
	"/channel/:channel/channels": { "channel": string };
	"/channel/:channel/streams": { "channel": string };
	"/channel/:channel/shorts": { "channel": string };
	"/watch/:video": { "video": string };
	"/watch/:video/about": { "video": string };
}

type NavigateWithParamOptions<P> = P extends number
	? []
	: P extends PathsWithParams
		? [Partial<NavigateOptions> & { params: Params[P] }]
		: [Partial<NavigateOptions> & { params?: never }] | [];

export type AnchorWithParamProps<P> = AnchorProps &
	(P extends PathsWithParams ? { href: P; params: Params[P] } : { href: P; params?: never });
export type NavigateWithParamProps<P> = NavigateProps &
	(P extends PathsWithParams ? { href: P; params: Params[P] } : { href: P; params?: never });

export const useParams: <P extends PathsWithParams>(path: P) => Params[P] = useParams_ as any;
export const useNavigate = (): (<P extends Paths | number>(
	href: P,
	...options: NavigateWithParamOptions<P>
) => void) => {
	const navigate = useNavigate_();
	return ((path: any, options: any) => {
		if (typeof path === "number") {
			return navigate(path);
		}

		const params = options?.params;
		return navigate(params ? generatePath(path, params) : path, options);
	}) as any;
};

export const A = <P extends Paths>(props: AnchorWithParamProps<P>) => {
	const [int, ext] = splitProps(props, ["href", "params"]);
	return A_(mergeProps(ext, { get href() { return int.params ? generatePath(int.href, int.params) : int.href; } }));
};
export const Navigate = <P extends Paths>(props: NavigateWithParamProps<P>) => {
	const [int, ext] = splitProps(props, ["href", "params"]);
	return Navigate_(mergeProps(ext, { get href() { return int.params ? generatePath(int.href, int.params) : int.href; } }));
};

export { A as NavLink };

const RE_PARAM = /\/:(\w+)(\??)/g;
const generatePath = (path: string, params: Record<string, string>) =>
	path.replace(RE_PARAM, (_, segment) => (params[segment] ? `/${params[segment]}` : ""));
